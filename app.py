from flask import Flask, request, jsonify, send_file
from flasgger import Swagger, swag_from
from werkzeug.utils import secure_filename
import subprocess
import logging
import os
import tempfile
import requests

app = Flask(__name__)
Swagger(app)

# Function to run commands
def run_command(command):
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    return output.decode(), error.decode()



# Example endpoint for a full scan and report generation
@app.route('/full_scan', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'formData',
            'type': 'string',
            'required': True,
            'description': 'The target URL or IP to scan.'
        },
        {
            'name': 'param',
            'in': 'formData',
            'type': 'string',
            'required': True,
            'description': 'A parameter for SQLi test.'
        },
        {
            'name': 'credentials',
            'in': 'formData',
            'type': 'string',
            'required': True,
            'description': 'Credentials for privilege escalation test.'
        },
        {
            'name': 'wordlist',
            'in': 'formData',
            'type': 'file',
            'required': True,
            'description': 'Wordlist file for directory brute force test.'
        },
        {
            'name': 'useragents_file',
            'in': 'formData',
            'type': 'file',
            'required': False,
            'description': 'File containing user-agents for directory brute force test.'
        },
        {
            'name': 'upload_file',
            'in': 'formData',
            'type': 'file',
            'required': True,
            'description': 'File to upload for file upload test.'
        },
        {
            'name': 'password_list_file',
            'in': 'formData',
            'type': 'file',
            'required': True,
            'description': 'Password list file for rate limit test.'
        }
    ],
    'responses': {
        200: {
            'description': 'Full scan report',
            'schema': {
                'type': 'file'
            }
        }
    }
})
def full_scan():
    """
    Perform a full scan including Nmap, XSS test, SQLi test, CSRF test,
    file upload test, privilege escalation test, rate limit test, and
    directory brute force test.
    """
    target = request.form.get('target')
    param = request.form.get('param')
    credentials = request.form.get('credentials')
    
    if not target or not param or not credentials:
        return jsonify({'error': 'Missing required parameters'}), 400

    report = []

    # Save uploaded files temporarily
    wordlist_file = request.files.get('wordlist')
    useragents_file = request.files.get('useragents_file')
    upload_file = request.files.get('upload_file')
    password_list_file = request.files.get('password_list_file')

    temp_files = []
    if wordlist_file:
        wordlist_path = tempfile.NamedTemporaryFile(delete=False)
        wordlist_file.save(wordlist_path.name)
        temp_files.append(wordlist_path.name)
    else:
        return jsonify({'error': 'Wordlist file is required'}), 400

    if useragents_file:
        useragents_path = tempfile.NamedTemporaryFile(delete=False)
        useragents_file.save(useragents_path.name)
        temp_files.append(useragents_path.name)
    else:
        useragents_path = None

    if upload_file:
        upload_path = tempfile.NamedTemporaryFile(delete=False)
        upload_file.save(upload_path.name)
        temp_files.append(upload_path.name)
    else:
        return jsonify({'error': 'Upload file is required'}), 400

    if password_list_file:
        password_list_path = tempfile.NamedTemporaryFile(delete=False)
        password_list_file.save(password_list_path.name)
        temp_files.append(password_list_path.name)
    else:
        return jsonify({'error': 'Password list file is required'}), 400

    # Nmap scan
    command = f'nmap -sS -sV -T4 {target}'
    output, error = run_command(command)
    report.append(f'Nmap scan result for {target}:\n{output}\n{error}')

    # XSS test
    payload = "<script>alert('XSS')</script>"
    report.append(f'XSS test for {target} with payload {payload}:\nXSS test completed\n')

    # SQLi test
    payload = "' OR '1'='1"
    full_url = f'{target}?{param}={payload}'
    command = f'sqlmap -u "{full_url}" --batch'
    output, error = run_command(command)
    report.append(f'SQLi test result for {target} with param {param}:\n{output}\n{error}')

    # CSRF test
    csrf_payload = f'''
    <form action="{target}" method="POST">
        <input type="hidden" name="csrf_token" value="invalid_token">
        <input type="submit" value="Submit">
    </form>
    '''
    report.append(f'CSRF test for {target} with payload:\n{csrf_payload}\nCSRF test completed\n')

    # File upload test
    command = f'curl -F "file=@{upload_path.name}" {target}'
    output, error = run_command(command)
    report.append(f'File upload test result for {target} with file {upload_path.name}:\n{output}\n{error}')

    # Privilege escalation test
    session = requests.Session()
    login_url = f'{target}/login'
    response = session.post(login_url, data=credentials)
    if 'welcome' in response.text.lower():
        escalation_payload = {'action': 'escalate'}
        escalation_url = f'{target}/admin'
        escalation_response = session.post(escalation_url, data=escalation_payload)
        report.append(f'Privilege escalation test result for {target}:\n{escalation_response.text}')
    else:
        report.append(f'Login failed for privilege escalation test on {target}')

    # Rate limit test
    username = 'admin'
    command = f'hydra -l {username} -P {password_list_path.name} {target} http-post-form "/login:username=^USER^&password=^PASS^:F=incorrect"'
    output, error = run_command(command)
    report.append(f'Rate limiting and brute force test result for {target}:\n{output}\n{error}')

    # Directory brute force
    command = f'urlbuster -W {wordlist_path.name} -m "GET,POST" {target}'
    if useragents_path:
        command += f' -A {useragents_path.name}'
    output, error = run_command(command)
    report.append(f'Directory brute force result for {target}:\n{output}\n{error}')

    # Save the report to a file
    report_path = '/tmp/full_scan_report.txt'
    with open(report_path, 'w') as file:
        file.write('\n'.join(report))

    # Cleanup temporary files
    for temp_file in temp_files:
        os.remove(temp_file)

    return send_file(report_path, as_attachment=True, attachment_filename='full_scan_report.txt')


# Example endpoint for scanning a target
@app.route('/scan', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The target URL or IP to scan.'
        }
    ],
    'responses': {
        200: {
            'description': 'Scan result',
            'schema': {
                'type': 'object',
                'properties': {
                    'result': {
                        'type': 'string',
                        'example': 'Nmap scan result'
                    }
                }
            }
        }
    }
})
def scan():
    """
    Perform a scan using Nmap on the provided target.
    """
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    # Example of running a scan (nmap in this case)
    command = f'nmap -sS -sV -T4 {target}'
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    # Log the result
    logging.info(f'Scan result for {target}: {output.decode()}')

    return jsonify({'result': output.decode()}), 200

# Example endpoint for XSS testing
@app.route('/xss_test', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The target URL to test.'
        }
    ],
    'responses': {
        200: {
            'description': 'XSS test result',
            'schema': {
                'type': 'string',
                'example': 'XSS test successful'
            }
        }
    }
})
def xss_test():
    """
    Perform an XSS test on the provided target.
    """
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    # Example XSS payload
    payload = "<script>alert('XSS')</script>"

    # Construct the request
    headers = {'Content-Type': 'application/x-www-form-urlencoded'}
    data = {'comment': payload}
    response = requests.post(target, headers=headers, data=data)

    return jsonify({'result': 'XSS test successful'}), 200

# Example endpoint for SQLi testing
@app.route('/sqli_test', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The target URL to test.'
        },
        {
            'name': 'param',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The parameter to test for SQLi.'
        }
    ],
    'responses': {
        200: {
            'description': 'SQLi test result',
            'schema': {
                'type': 'object',
                'properties': {
                    'result': {
                        'type': 'string',
                        'example': 'SQLi test completed'
                    }
                }
            }
        }
    }
})
def sqli_test():
    """
    Perform an SQLi test on the provided target with a parameter.
    """
    data = request.get_json()
    target = data.get('target')
    param = data.get('param')

    if not target or not param:
        return jsonify({'error': 'Missing target or param'}), 400

    # Example of running an SQLi test (using a simple payload)
    payload = "' OR '1'='1"
    full_url = f'{target}?{param}={payload}'
    
    # Logic to test for SQLi (example using requests library)
    try:
        response = requests.get(full_url)
        # You can implement logic to check for SQLi vulnerability based on response content
        if response.status_code == 200 and 'error' not in response.text.lower():
            # Log the test
            app.logger.info(f'SQLi test for {target} with param {param} succeeded')
            return jsonify({'result': 'SQLi test successful'}), 200
        else:
            app.logger.warning(f'SQLi test for {target} with param {param} failed')
            return jsonify({'result': 'SQLi test failed'}), 200
    except Exception as e:
        app.logger.error(f'SQLi test for {target} with param {param} encountered an error: {str(e)}')
        return jsonify({'error': 'SQLi test failed due to an error'}), 500

# Example endpoint for CSRF testing
@app.route('/csrf_test', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The target URL to test.'
        }
    ],
    'responses': {
        200: {
            'description': 'CSRF test result',
            'schema': {
                'type': 'object',
                'properties': {
                    'result': {
                        'type': 'string',
                        'example': 'CSRF test completed'
                    }
                }
            }
        }
    }
})
def csrf_test():
    """
    Perform a CSRF test on the provided target.
    """
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    # Example of running a CSRF test (using a simple payload)
    csrf_payload = f'''
    <form action="{target}" method="POST">
        <input type="hidden" name="csrf_token" value="invalid_token">
        <input type="submit" value="Submit">
    </form>
    '''
    # Simulate sending the payload to the target URL
    response = requests.post(target, data={'csrf_token': 'invalid_token'})

    # Check if the test succeeded (assuming response analysis logic)
    if 'csrf_token' not in response.text:
        test_result = 'CSRF vulnerability detected'
    else:
        test_result = 'CSRF protection seems effective'

    # Log the test
    logging.info(f'CSRF test for {target} with payload:\n{csrf_payload}')

    return jsonify({'result': test_result}), 200

# Example endpoint for file upload testing
@app.route('/file_upload_test', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The target URL to test.'
        },
        {
            'name': 'upload_file',
            'in': 'formData',
            'type': 'file',
            'required': True,
            'description': 'File to upload.'
        }
    ],
    'responses': {
        200: {
            'description': 'File upload test result',
            'schema': {
                'type': 'object',
                'properties': {
                    'result': {
                        'type': 'string',
                        'example': 'File upload test completed'
                    }
                }
            }
        }
    }
})
def file_upload_test():
    """
    Perform a file upload test on the provided target.
    """
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    upload_file = request.files.get('upload_file')
    if not upload_file:
        return jsonify({'error': 'No file provided'}), 400

    # Save the uploaded file temporarily
    filename = secure_filename(upload_file.filename)
    upload_file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))

    # Perform file upload test (assuming a curl command for simplicity)
    command = f'curl -F "file=@{os.path.join(app.config["UPLOAD_FOLDER"], filename)}" {target}'
    subprocess.run(command, shell=True, check=True)

    # Clean up: remove the temporary file
    os.remove(os.path.join(app.config['UPLOAD_FOLDER'], filename))

    # Log the test
    logging.info(f'File upload test for {target} with file {filename}')

    return jsonify({'result': 'File upload test completed'}), 200


# Example endpoint for privilege escalation testing
@app.route('/privilege_escalation_test', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The target URL to test.'
        },
        {
            'name': 'credentials',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'Credentials to authenticate.'
        }
    ],
    'responses': {
        200: {
            'description': 'Privilege escalation test result',
            'schema': {
                'type': 'object',
                'properties': {
                    'result': {
                        'type': 'string',
                        'example': 'Privilege escalation successful'
                    }
                }
            }
        }
    }
})
def privilege_escalation_test():
    """
    Perform a privilege escalation test on the provided target.
    """
    target = request.json.get('target')
    credentials = request.json.get('credentials')
    if not target or not credentials:
        return jsonify({'error': 'Missing target or credentials'}), 400

    # Example of running a privilege escalation test (using requests library)
    session = requests.Session()
    login_url = f'{target}/login'
    response = session.post(login_url, data=credentials)
    if 'welcome' in response.text.lower():
        # Attempt privilege escalation
        escalation_payload = {'action': 'escalate'}
        escalation_url = f'{target}/admin'
        escalation_response = session.post(escalation_url, data=escalation_payload)

        # Check if escalation was successful (assuming logic to verify)
        if 'admin panel' in escalation_response.text.lower():
            test_result = 'Privilege escalation successful'
        else:
            test_result = 'Privilege escalation failed'

        # Log the test
        logging.info(f'Privilege escalation test for {target} using credentials {credentials}')

        return jsonify({'result': test_result}), 200
    else:
        return jsonify({'error': 'Login failed'}), 401


# Example endpoint for rate limit testing
@app.route('/rate_limit_test', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The target URL to test.'
        },
        {
            'name': 'username',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'Username for brute force.'
        },
        {
            'name': 'password_list_file',
            'in': 'formData',
            'type': 'file',
            'required': True,
            'description': 'Password list file for brute force.'
        }
    ],
    'responses': {
        200: {
            'description': 'Rate limit and brute force test result',
            'schema': {
                'type': 'object',
                'properties': {
                    'result': {
                        'type': 'string',
                        'example': 'Rate limit and brute force test completed'
                    }
                }
            }
        }
    }
})
def rate_limit_test():
    """
    Perform a rate limit and brute force test on the provided target.
    """
    target = request.json.get('target')
    username = request.json.get('username')
    if not target or not username:
        return jsonify({'error': 'Missing target or username'}), 400

    password_list_file = request.files.get('password_list_file')
    if not password_list_file:
        return jsonify({'error': 'No password list file provided'}), 400

    # Example of running a rate limit and brute force test (using hydra)
    command = f'hydra -l {username} -P {password_list_file.filename} {target} http-post-form "/login:username=^USER^&password=^PASS^:F=incorrect"'
    subprocess.run(command, shell=True, check=True)

    # Log the test
    logging.info(f'Rate limit and brute force test for {target} with username {username}')

    return jsonify({'result': 'Rate limit and brute force test completed'}), 200

# Example endpoint for directory brute force testing
@app.route('/dir_bruteforce', methods=['POST'])
@swag_from({
    'parameters': [
        {
            'name': 'target',
            'in': 'body',
            'type': 'string',
            'required': True,
            'description': 'The target URL to test.'
        },
        {
            'name': 'wordlist',
            'in': 'formData',
            'type': 'file',
            'required': True,
            'description': 'Wordlist file for directory brute force test.'
        },
        {
            'name': 'useragents_file',
            'in': 'formData',
            'type': 'file',
            'required': False,
            'description': 'File containing user-agents for directory brute force test.'
        }
    ],
    'responses': {
        200: {
            'description': 'Directory brute force test result',
            'schema': {
                'type': 'object',
                'properties': {
                    'result': {
                        'type': 'string',
                        'example': 'Directory brute force test completed'
                    }
                }
            }
        }
    }
})
def dir_bruteforce():
    """
    Perform a directory brute force test on the provided target.
    """
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    wordlist_file = request.files.get('wordlist')
    if not wordlist_file:
        return jsonify({'error': 'No wordlist file provided'}), 400

    useragents_file = request.files.get('useragents_file')

    # Example of running a directory brute force test (using urlbuster)
    command = f'urlbuster -W {wordlist_file.filename} -m "GET,POST" {target}'
    if useragents_file:
        command += f' -A {useragents_file.filename}'
    subprocess.run(command, shell=True, check=True)

    # Log the test
    logging.info(f'Directory brute force test for {target} with wordlist {wordlist_file.filename}')

    return jsonify({'result': 'Directory brute force test completed'}), 200

# Ensure the application runs with logging enabled
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app.run(host="0.0.0.0",port=5000)
