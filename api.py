from flask import Flask, request, jsonify, send_file
import subprocess
import logging
import os
import tempfile
import requests

app = Flask(__name__)


def run_command(command):
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, error = process.communicate()
    return output.decode(), error.decode()

@app.route('/full_scan', methods=['POST'])
def full_scan():
    target = request.form.get('target')
    param = request.form.get('param')
    credentials = request.form.get('credentials')
    
    if not target or not param or not credentials:
        return jsonify({'error': 'Missing required parameters'}), 400

    report = []

    # Save uploaded files temporarily
    wordlist_file = request.files.get('wordlist')
    useragents_file = request.files.get('useragents_file')
    upload_file = request.files.get('upload_file')
    password_list_file = request.files.get('password_list_file')

    temp_files = []
    if wordlist_file:
        wordlist_path = tempfile.NamedTemporaryFile(delete=False)
        wordlist_file.save(wordlist_path.name)
        temp_files.append(wordlist_path.name)
    else:
        return jsonify({'error': 'Wordlist file is required'}), 400

    if useragents_file:
        useragents_path = tempfile.NamedTemporaryFile(delete=False)
        useragents_file.save(useragents_path.name)
        temp_files.append(useragents_path.name)
    else:
        useragents_path = None

    if upload_file:
        upload_path = tempfile.NamedTemporaryFile(delete=False)
        upload_file.save(upload_path.name)
        temp_files.append(upload_path.name)
    else:
        return jsonify({'error': 'Upload file is required'}), 400

    if password_list_file:
        password_list_path = tempfile.NamedTemporaryFile(delete=False)
        password_list_file.save(password_list_path.name)
        temp_files.append(password_list_path.name)
    else:
        return jsonify({'error': 'Password list file is required'}), 400

    # Nmap scan
    command = f'nmap -sS -sV -T4 {target}'
    output, error = run_command(command)
    report.append(f'Nmap scan result for {target}:\n{output}\n{error}')

    # XSS test
    payload = "<script>alert('XSS')</script>"
    report.append(f'XSS test for {target} with payload {payload}:\nXSS test completed\n')

    # SQLi test
    payload = "' OR '1'='1"
    full_url = f'{target}?{param}={payload}'
    command = f'sqlmap -u "{full_url}" --batch'
    output, error = run_command(command)
    report.append(f'SQLi test result for {target} with param {param}:\n{output}\n{error}')

    # CSRF test
    csrf_payload = f'''
    <form action="{target}" method="POST">
        <input type="hidden" name="csrf_token" value="invalid_token">
        <input type="submit" value="Submit">
    </form>
    '''
    report.append(f'CSRF test for {target} with payload:\n{csrf_payload}\nCSRF test completed\n')

    # File upload test
    command = f'curl -F "file=@{upload_path.name}" {target}'
    output, error = run_command(command)
    report.append(f'File upload test result for {target} with file {upload_path.name}:\n{output}\n{error}')

    # Privilege escalation test
    session = requests.Session()
    login_url = f'{target}/login'
    response = session.post(login_url, data=credentials)
    if 'welcome' in response.text.lower():
        escalation_payload = {'action': 'escalate'}
        escalation_url = f'{target}/admin'
        escalation_response = session.post(escalation_url, data=escalation_payload)
        report.append(f'Privilege escalation test result for {target}:\n{escalation_response.text}')
    else:
        report.append(f'Login failed for privilege escalation test on {target}')

    # Rate limit test
    username = 'admin'
    command = f'hydra -l {username} -P {password_list_path.name} {target} http-post-form "/login:username=^USER^&password=^PASS^:F=incorrect"'
    output, error = run_command(command)
    report.append(f'Rate limiting and brute force test result for {target}:\n{output}\n{error}')

    # Directory brute force
    command = f'urlbuster -W {wordlist_path.name} -m "GET,POST" {target}'
    if useragents_path:
        command += f' -A {useragents_path.name}'
    output, error = run_command(command)
    report.append(f'Directory brute force result for {target}:\n{output}\n{error}')

    # Save the report to a file
    report_path = '/tmp/full_scan_report.txt'
    with open(report_path, 'w') as file:
        file.write('\n'.join(report))

    # Cleanup temporary files
    for temp_file in temp_files:
        os.remove(temp_file)

    return send_file(report_path, as_attachment=True, attachment_filename='full_scan_report.txt')



#####################################################

@app.route('/scan', methods=['POST'])
def scan():
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    # Example of running a scan (nmap in this case)
    command = f'nmap -sS -sV -T4 {target}'
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    # Log the result
    logging.info(f'Scan result for {target}: {output.decode()}')

    return jsonify({'result': output.decode()}), 200

@app.route('/xss_test', methods=['POST'])
def xss_test():
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    # Example of running an XSS test (using a simple payload)
    payload = "<script>alert('XSS')</script>"
    # Logic to test for XSS would go here
    # ...

    # Log the test
    logging.info(f'XSS test for {target} with payload {payload}')

    return jsonify({'result': 'XSS test completed'}), 200


#############################################

@app.route('/sqli_test', methods=['POST'])
def sqli_test():
    target = request.json.get('target')
    param = request.json.get('param')
    if not target or not param:
        return jsonify({'error': 'Target or param not provided'}), 400

    # Example SQLi payload
    payload = "' OR '1'='1"
    full_url = f'{target}?{param}={payload}'

    # Use sqlmap or similar tool for testing
    command = f'sqlmap -u "{full_url}" --batch'
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    # Log the result
    logging.info(f'SQLi test result for {target} with param {param}: {output.decode()}')

    return jsonify({'result': output.decode()}), 200


##############################################


@app.route('/csrf_test', methods=['POST'])
def csrf_test():
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    # Example CSRF payload (simplified for demonstration)
    payload = '''
    <form action="{target}" method="POST">
        <input type="hidden" name="csrf_token" value="invalid_token">
        <input type="submit" value="Submit">
    </form>
    '''
    payload = payload.format(target=target)

    # Log the test
    logging.info(f'CSRF test for {target} with payload {payload}')

    return jsonify({'result': 'CSRF test completed'}), 200


##################################################

@app.route('/file_upload_test', methods=['POST'])
def file_upload_test():
    target = request.json.get('target')
    file_path = request.json.get('file_path')
    if not target or not file_path:
        return jsonify({'error': 'Target or file_path not provided'}), 400

    # Example payload for file upload test
    files = {'file': open(file_path, 'rb')}
    response = request.json.post(target, files=files)

    # Log the result
    logging.info(f'File upload test result for {target} with file {file_path}: {response.text}')

    return jsonify({'result': response.text}), 200

######################################################

@app.route('/file_upload_test', methods=['POST'])
def file_upload_test():
    target = request.json.get('target')
    file_path = request.json.get('file_path')
    if not target or not file_path:
        return jsonify({'error': 'Target or file_path not provided'}), 400

    # Example payload for file upload test
    files = {'file': open(file_path, 'rb')}
    response = request.json.post(target, files=files)

    # Log the result
    logging.info(f'File upload test result for {target} with file {file_path}: {response.text}')

    return jsonify({'result': response.text}), 200



#####################################################

@app.route('/privilege_escalation_test', methods=['POST'])
def privilege_escalation_test():
    target = request.json.get('target')
    credentials = request.json.get('credentials')
    if not target or not credentials:
        return jsonify({'error': 'Target or credentials not provided'}), 400

    # Example of attempting privilege escalation
    # Use credentials to authenticate and perform actions
    session = request.json.Session()
    login_url = f'{target}/login'
    response = session.post(login_url, data=credentials)

    # Check if login was successful and attempt privilege escalation
    if 'welcome' in response.text.lower():
        escalation_payload = {'action': 'escalate'}
        escalation_url = f'{target}/admin'
        escalation_response = session.post(escalation_url, data=escalation_payload)

        # Log the result
        logging.info(f'Privilege escalation test result for {target}: {escalation_response.text}')
        return jsonify({'result': escalation_response.text}), 200

    logging.warning(f'Login failed for privilege escalation test on {target}')
    return jsonify({'error': 'Login failed'}), 400


#########################################################

@app.route('/rate_limit_test', methods=['POST'])
def rate_limit_test():
    target = request.json.get('target')
    if not target:
        return jsonify({'error': 'No target provided'}), 400

    # Example of brute force attack using Hydra (simplified)
    username = 'admin'
    password_list = '/path/to/password_list'
    command = f'hydra -l {username} -P {password_list} {target} http-post-form "/login:username=^USER^&password=^PASS^:F=incorrect"'
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    # Log the result
    logging.info(f'Rate limiting and brute force test result for {target}: {output.decode()}')

    return jsonify({'result': output.decode()}), 200

#########################################################

@app.route('/dir_bruteforce', methods=['POST'])
def dir_bruteforce():
    target = request.json.get('target')
    wordlist_path = request.json.get('wordlist_path')
    useragents_file = request.json.get('useragents_file', None)
    methods = request.json.get('methods', 'GET')
    
    if not target or not wordlist_path:
        return jsonify({'error': 'Target or wordlist_path not provided'}), 400
    
    command = f'urlbuster -W {wordlist_path} -m "{methods}" {target}'
    
    if useragents_file:
        command += f' -A {useragents_file}'
    
    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()

    # Log the result
    logging.info(f'Directory brute force result for {target}: {output.decode()}')

    return jsonify({'result': output.decode()}), 200





#run full scan and create report endpoint.


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    app.run(host='0.0.0.0', port=5000)